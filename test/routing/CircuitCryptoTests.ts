import * as cc from "../../src/routing/circuit/CircuitCrypto";
import {buildCircuitKeys, CircuitCryptoState, newCircuitCryptoState} from "../../src/routing/circuit/CircuitCrypto";
import {expect} from "chai";
import * as c from "crypto";
import * as forge from "node-forge";
import {stringToAsciiByteArray} from "../../src/utils/Hex";

describe('CircuitCrypto test', () => {
    it('should build Circuit Keys', () => {

        var input = [
            97, 217, 166, 178, 44, 55, 115, 148, 73, 243, 148,
            189, 194, 250, 8, 16, 36, 1, 251, 92, 235, 56, 133,
            208, 70, 251, 156, 196, 101, 203, 185, 113, 181, 57,
            14, 116, 197, 24, 59, 249, 98, 250, 250, 230, 94, 220, 199, 121,
            97, 8, 62, 158, 66, 196, 22, 39, 168, 98, 8, 211, 167, 210, 145,
            255, 77, 242, 91, 243, 112, 21, 128, 229
        ];

        var Df = [
            97, 217, 166, 178, 44, 55, 115, 148, 73, 243, 148,
            189, 194, 250, 8, 16, 36, 1, 251, 92
        ];

        var Db = [
            235, 56, 133, 208, 70, 251, 156, 196, 101, 203, 185,
            113, 181, 57, 14, 116, 197, 24, 59, 249
        ];

        var Kf = [
            98, 250, 250, 230, 94, 220, 199, 121, 97, 8, 62, 158,
            66, 196, 22, 39
        ];

        var Kb = [
            168, 98, 8, 211, 167, 210, 145, 255, 77, 242, 91, 243,
            112, 21, 128, 229
        ];

        let result = buildCircuitKeys(Buffer.from(input));

        expect(result.Df).to.eql(Buffer.from(Df));
        expect(result.Db).to.eql(Buffer.from(Db));
        expect(result.Kf).to.eql(Buffer.from(Kf));
        expect(result.Kb).to.eql(Buffer.from(Kb));

    })

    it('can encrypt sha1', ()=>{
        var d = [
            136, 219, 141, 210, 139,
            229, 112, 6, 44 , 52 , 75 ,
            206, 119, 72, 120, 238, 199,
            254, 67, 38
        ];

       var result = [
            159, 159, 120, 145, 64, 205,
            231, 35, 169, 26, 137, 52,
            230, 223, 206, 203, 212, 67, 128, 141
        ];

        let byteBuffer = new Uint8Array(d);
        let v = c.createHash('sha1').update(byteBuffer);
        let digest = v.digest();

        expect(digest).to.eql(Buffer.from(result));
    })

     it('can perform cryptographic functions ', ()=>{
          // Inputs and results data are taken from Go SDK version for comparison
          // perform in one test since state needs to be preserved for fwd and backs tates

          // hop 0 fwd keys
          var d = [
               179, 133, 90, 130, 19, 91, 194, 221, 240, 217, 66, 237, 182, 142, 222, 81, 189, 121, 44, 22 ];
          var k = [
               97, 77, 184, 114, 143, 4, 67, 144, 243, 201, 101, 157, 128, 147, 53, 73 ];

          var input = [
               1, 0, 0, 0, 0, 0, 0, 0, 151, 2, 2, 32, 11, 244, 182, 118, 207, 237, 73, 250,
               2, 44, 177, 24, 77, 157, 6, 40, 105, 152, 23, 213, 13, 153, 119, 79, 124, 150,
               116, 191, 192, 203, 180, 140, 3, 14, 27, 97, 99, 50, 49, 48, 50, 53, 56, 98,
               55, 52, 97, 100, 0, 1, 0, 96, 11, 244, 182, 118, 207, 237, 73, 250, 2, 44,
               177, 24, 77, 157, 6, 40, 105, 152, 23, 213, 13, 153, 119, 79, 124, 150, 116,
               191, 192, 203, 180, 140, 176, 53, 162, 80, 46, 19, 226, 142, 164, 127, 157,
               240, 160, 127, 72, 235, 190, 12, 229, 9, 52, 5, 229, 90, 174, 160, 35, 231,
               152, 177, 100, 72, 77, 133, 230, 235, 204, 210, 92, 185, 62, 159, 161, 225,
               135, 191, 116, 112, 88, 129, 187, 139, 122, 187, 138, 134, 142, 91, 104, 155,
               248, 123, 138, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0];

          var output = [
               118, 31, 195, 24, 16, 127, 183, 139, 22, 79, 34, 41, 191, 246, 56, 232, 124,
               116, 205, 221, 133, 202, 140, 243, 10, 167, 73, 233, 154, 43, 95, 123, 12, 85,
               144, 71, 103, 26, 106, 23, 65, 60, 110, 28, 245, 211, 74, 249, 31, 4, 35, 130,
               75, 183, 53, 217, 160, 13, 117, 176, 205, 114, 162, 175, 119, 136, 96, 123, 151,
               33, 217, 134, 65, 21, 40, 76, 17, 27, 249, 255, 68, 74, 4, 1, 181, 88, 32, 66, 209,
               62, 87, 218, 18, 245, 116, 169, 170, 255, 208, 55, 18, 237, 189, 150, 164, 26, 235,
               30, 61, 51, 60, 221, 139, 107, 212, 47, 235, 105, 93, 201, 91, 13, 110, 183, 223, 105,
               194, 62, 177, 149, 215, 253, 235, 101, 151, 85, 153, 109, 82, 120, 243, 66, 221, 76, 12,
               170, 21, 34, 113, 77, 226, 143, 122, 63, 120, 250, 8, 43, 145, 172, 188, 94, 250, 247, 113,
               72, 187, 72, 86, 74, 120, 17, 71, 144, 162, 229, 73, 18, 108, 10, 33, 91, 255, 172, 191, 229,
               37, 234, 20, 60, 138, 64, 98, 70, 33, 133, 27, 13, 6, 62, 38, 235, 190, 32, 57, 79, 53, 105, 208,
               110, 214, 145, 96, 178, 253, 70, 57, 205, 128, 10, 6, 157, 70, 69, 168, 199, 111, 89, 114, 19, 242,
               10, 72, 195, 243, 143, 175, 101, 205, 47, 148, 51, 12, 192, 232, 194, 249, 199, 187, 174, 99, 82, 223,
               143, 145, 215, 7, 96, 93, 255, 186, 134, 206, 22, 6, 104, 77, 192, 213, 18, 106, 191, 119, 164, 156, 40,
               161, 4, 99, 253, 166, 2, 122, 252, 202, 70, 165, 96, 9, 112, 145, 230, 188, 236, 246, 36, 50, 32, 24, 3, 70,
               141, 157, 221, 27, 62, 57, 138, 181, 208, 253, 157, 183, 241, 48, 188, 59, 247, 235, 134, 122, 250, 165, 240,
               234, 134, 5, 227, 198, 14, 221, 175, 171, 203, 160, 142, 45, 140, 191, 73, 235, 41, 6, 127, 90, 249, 49, 82,
               165, 81, 54, 215, 167, 96, 118, 1, 212, 187, 147, 147, 83, 8, 139, 78, 123, 199, 88, 180, 197, 98, 246, 125,
               31, 118, 39, 170, 2, 85, 125, 87, 116, 50, 91, 7, 183, 156, 167, 29, 222, 167, 64, 113, 250, 234, 89, 129, 249,
               179, 174, 187, 80, 161, 206, 202, 177, 47, 190, 47, 124, 64, 222, 20, 63, 43, 213, 102, 161, 58, 113, 109, 48,
               52, 187, 222, 104, 57, 77, 152, 127, 232, 63, 217, 152, 153, 234, 93, 164, 162, 204, 178, 18, 208, 76, 61, 157,
               211, 97, 175, 107, 90, 63, 147, 20, 250, 2, 155, 125, 83, 162, 93, 132, 150, 238, 227, 211, 80, 245, 193, 175,
               143, 172, 148, 105, 41, 160, 99, 223, 220, 247, 10, 32, 118, 5, 133, 86, 137, 47, 156, 151, 54, 255, 136, 87, 86,
               106, 172, 167, 38, 96, 146, 250, 198, 3, 193, 115, 81, 105, 5, 111];

          let cryptoState = newCircuitCryptoState(Buffer.from(d), Buffer.from(k));
          let encrypted0 = cryptoState.encryptOrigin(Buffer.from(input));
          expect(encrypted0).to.eql(Buffer.from(output));

          var bd = [
               43, 195, 172, 185, 90, 160, 255, 96, 94, 237, 41, 165, 78, 94, 201, 4, 11, 126, 51, 212, ];
          var bk = [
               112, 254, 174, 166, 120, 76, 7, 17, 10, 216, 13, 189, 118, 102, 76, 113, ];

          var p = [
               119, 233, 188, 234, 19, 189, 210, 143, 139, 45, 39, 74, 128, 7, 25, 113, 215, 169, 108, 228,
               170, 225, 44, 11, 202, 229, 163, 245, 18, 251, 151, 63, 63, 206, 73, 5, 221, 244, 65, 217, 61,
               73, 164, 136, 232, 18, 42, 79, 19, 37, 1, 199, 94, 154, 168, 104, 240, 23, 166, 136, 54, 19, 178,
               247, 114, 74, 149, 188, 225, 187, 129, 13, 148, 129, 130, 106, 253, 210, 48, 14, 182, 103, 82, 20,
               74, 148, 121, 232, 84, 135, 192, 67, 232, 150, 230, 83, 62, 82, 150, 168, 25, 141, 6, 106, 128, 173,
               217, 76, 204, 252, 164, 220, 171, 30, 152, 49, 44, 109, 9, 210, 231, 64, 107, 146, 151, 224, 142, 60,
               150, 8, 11, 112, 116, 106, 112, 221, 163, 169, 121, 47, 25, 163, 135, 31, 47, 58, 193, 97, 100, 67, 220,
               238, 82, 55, 193, 93, 11, 217, 45, 43, 139, 186, 62, 27, 127, 62, 163, 132, 249, 30, 73, 177, 155, 50, 99,
               96, 214, 247, 141, 77, 3, 47, 236, 214, 116, 48, 170, 8, 144, 206, 157, 91, 37, 89, 149, 25, 153, 46, 168,
               51, 96, 119, 13, 162, 38, 203, 42, 168, 64, 161, 239, 244, 139, 92, 174, 24, 12, 17, 239, 99, 117, 159, 200,
               143, 252, 190, 204, 34, 145, 217, 4, 19, 171, 67, 87, 227, 121, 186, 64, 32, 177, 234, 232, 140, 172, 249, 190,
               182, 222, 246, 51, 60, 116, 77, 152, 106, 179, 147, 211, 13, 121, 21, 254, 116, 113, 165, 27, 216, 40, 84, 240,
               191, 75, 85, 241, 153, 206, 166, 116, 249, 252, 213, 68, 20, 228, 51, 152, 121, 36, 104, 220, 144, 106, 188, 241,
               228, 104, 121, 159, 75, 31, 179, 41, 163, 166, 26, 251, 159, 151, 50, 72, 169, 93, 106, 112, 207, 69, 159, 20, 254,
               106, 56, 27, 162, 178, 58, 44, 192, 112, 252, 247, 121, 92, 105, 230, 83, 224, 193, 141, 121, 215, 185, 32, 252, 137,
               18, 119, 23, 86, 149, 135, 244, 51, 71, 134, 218, 149, 77, 210, 238, 217, 87, 169, 186, 29, 44, 10, 200, 189, 42, 204,
               86, 33, 48, 26, 181, 82, 32, 211, 203, 50, 127, 146, 123, 97, 127, 204, 134, 0, 192, 197, 223, 141, 201, 50, 72, 19, 61, 71,
               79, 20, 121, 204, 179, 140, 195, 255, 199, 153, 56, 142, 202, 237, 176, 153, 118, 33, 51, 115, 125, 194, 52, 154, 65, 3, 150,
               188, 215, 25, 105, 49, 2, 18, 231, 202, 109, 132, 63, 214, 183, 80, 244, 8, 10, 54, 175, 205, 224, 202, 142, 59, 72, 251, 174,
               118, 96, 251, 75, 36, 230, 135, 193, 98, 57, 35, 152, 91, 111, 51, 35, 47, 10, 160, 17, 128, 194, 9, 198, 4, 85, 24, 163, 231,
               22, 143, 139, 183, 118, 11, 171, 192, 204, 3, 239, 41, 191, 98, 40, 156, 3, 228, 212, 3, 46, 158, 213, 160, 56, 191];

          var decPayload = [
               2, 0, 0, 63, 88, 122, 109, 0, 66, 0, 64, 175, 135, 151, 7, 164, 218, 104, 130, 149, 116, 184, 69, 233, 197, 5, 126, 48, 96, 117,
               150, 200, 211, 119, 115, 79, 250, 111, 176, 59, 116, 110, 94, 188, 49, 206, 93, 189, 167, 197, 143, 48, 79, 195, 143, 39, 143, 207,
               245, 191, 174, 221, 60, 113, 35, 55, 55, 109, 119, 8, 208, 224, 106, 79, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

          // decrypt payload based from backstate
          let backstate = newCircuitCryptoState(Buffer.from(bd), Buffer.from(bk));
          let decrypted0 = backstate.decrypt(Buffer.from(p));
          expect(decrypted0).to.eql(Buffer.from(decPayload));

          // double encrypt payload for two hops
          var d1 = [
               186, 233, 204, 24, 142, 241, 129, 174, 14, 241, 59, 148, 63, 37, 195, 73, 116, 15, 246, 77];
          var k1 = [
               89, 102, 65, 124, 115, 110, 212, 53, 18, 183, 3, 4, 165, 128, 25, 165];

          var input1 = [
               1, 0, 0, 0, 0, 0, 0, 0, 151, 2, 2, 32, 116, 208, 119, 62, 129, 126, 23, 196, 142, 3, 241, 100, 223, 61, 203, 215, 195, 10, 136, 24,
               150, 49, 93, 105, 97, 118, 31, 79, 167, 192, 169, 61, 3, 14, 27, 93, 54, 53, 100, 49, 101, 52, 98, 51, 100, 56, 54, 99, 0, 1, 0, 96,
               116, 208, 119, 62, 129, 126, 23, 196, 142, 3, 241, 100, 223, 61, 203, 215, 195, 10, 136, 24, 150, 49, 93, 105, 97, 118, 31, 79, 167,
               192, 169, 61, 171, 90, 248, 117, 172, 155, 82, 167, 158, 106, 93, 220, 23, 219, 128, 38, 82, 29, 252, 138, 226, 29, 112, 152, 48, 120,
               250, 190, 98, 56, 178, 60, 34, 29, 6, 31, 5, 41, 8, 188, 105, 88, 180, 131, 223, 86, 206, 142, 166, 30, 26, 118, 204, 194, 97, 46, 153,
               201, 35, 161, 24, 70, 132, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

          var encrypted1 = [
               104, 51, 213, 74, 131, 78, 249, 148, 166, 216, 183, 94, 74, 218, 145, 167, 121, 12, 172, 77, 119, 79, 135, 44, 110, 225, 11, 20, 20, 125,
               26, 150, 223, 85, 25, 45, 143, 210, 32, 145, 167, 121, 199, 38, 234, 233, 112, 106, 244, 222, 81, 167, 125, 66, 78, 128, 68, 54, 48, 131,
               40, 181, 192, 210, 198, 146, 250, 112, 210, 223, 105, 211, 2, 158, 208, 86, 88, 174, 225, 217, 154, 129, 102, 183, 226, 156, 172, 218, 192,
               77, 194, 23, 80, 28, 75, 170, 125, 184, 244, 19, 71, 125, 215, 61, 71, 157, 175, 69, 229, 190, 18, 44, 87, 43, 65, 211, 191, 160, 1, 95, 0,
               54, 126, 120, 218, 91, 236, 125, 64, 160, 102, 93, 244, 251, 165, 225, 133, 69, 79, 85, 36, 42, 49, 90, 199, 98, 114, 13, 239, 16, 189, 226,
               160, 24, 58, 47, 226, 250, 27, 96, 61, 1, 211, 148, 139, 213, 97, 84, 99, 67, 90, 118, 89, 37, 43, 152, 84, 228, 16, 208, 112, 88, 36, 115,
               86, 121, 174, 61, 157, 11, 79, 136, 34, 60, 156, 46, 151, 80, 158, 144, 137, 154, 174, 31, 125, 199, 104, 176, 238, 122, 148, 103, 200, 1,
               216, 23, 33, 82, 88, 235, 107, 29, 229, 8, 52, 30, 142, 74, 73, 181, 117, 253, 110, 133, 27, 80, 54, 110, 185, 24, 37, 109, 93, 7, 8, 115,
               186, 251, 75, 122, 202, 155, 126, 70, 39, 38, 8, 112, 48, 50, 173, 82, 131, 98, 199, 162, 165, 114, 198, 35, 222, 133, 46, 15, 92, 192, 104,
               94, 128, 56, 198, 25, 226, 19, 182, 193, 102, 1, 35, 9, 51, 153, 187, 38, 222, 38, 45, 227, 116, 102, 184, 134, 33, 106, 181, 229, 79, 99, 50,
               157, 182, 152, 183, 172, 163, 205, 138, 224, 141, 27, 6, 3, 208, 62, 48, 0, 245, 252, 230, 96, 227, 172, 159, 173, 235, 185, 8, 93, 52, 146, 46,
               49, 27, 10, 56, 168, 242, 88, 16, 28, 102, 190, 53, 92, 94, 57, 56, 155, 111, 106, 91, 12, 212, 64, 170, 163, 82, 81, 71, 194, 220, 147, 119, 75,
               99, 113, 56, 207, 234, 182, 187, 255, 119, 3, 201, 157, 54, 244, 83, 109, 0, 36, 178, 218, 210, 65, 199, 39, 148, 114, 236, 37, 63, 161, 232, 223,
               250, 240, 158, 131, 231, 184, 85, 160, 218, 242, 60, 255, 158, 172, 248, 167, 139, 27, 242, 149, 51, 64, 34, 61, 81, 155, 76, 22, 60, 80, 196, 92,
               179, 143, 66, 171, 192, 131, 9, 113, 136, 230, 143, 180, 46, 238, 2, 68, 82, 141, 232, 242, 99, 60, 240, 221, 13, 214, 22, 251, 181, 167, 167, 240,
               154, 79, 143, 116, 71, 99, 167, 98, 253, 217, 203, 136, 96, 22, 116, 75, 153, 27, 138, 118, 204, 31, 146, 21, 149, 145, 216, 139, 154, 224, 55, 156,
               7, 228, 245, 247, 82, 253, 193];

          var encryptedHop = [
               219, 121, 58, 69, 128, 20, 193, 64, 240, 186, 64, 114, 94, 36, 32, 93, 124, 212, 182, 214, 155, 65, 254, 243, 145, 237, 150, 187, 85, 201, 47, 11, 17,
               69, 203, 9, 11, 175, 159, 142, 247, 161, 112, 83, 82, 182, 168, 223, 64, 72, 73, 214, 166, 28, 119, 103, 68, 182, 138, 193, 66, 163, 12, 233, 34, 129,
               168, 185, 11, 109, 39, 122, 82, 53, 57, 127, 148, 186, 85, 116, 64, 110, 101, 76, 73, 143, 34, 194, 85, 101, 253, 77, 55, 32, 184, 53, 47, 91, 97, 181,
               134, 27, 214, 195, 55, 204, 143, 225, 100, 19, 28, 80, 110, 37, 133, 124, 83, 85, 7, 31, 46, 66, 70, 44, 151, 159, 227, 236, 96, 77, 76, 123, 241, 77, 4,
               114, 92, 84, 185, 16, 194, 238, 57, 207, 155, 66, 5, 127, 99, 38, 184, 63, 246, 186, 186, 140, 0, 35, 9, 24, 152, 121, 64, 241, 255, 54, 120, 119, 211, 163,
               106, 170, 223, 95, 221, 93, 44, 55, 229, 186, 126, 255, 238, 101, 115, 41, 87, 248, 105, 80, 19, 111, 135, 36, 68, 151, 51, 146, 153, 104, 152, 199, 67, 77,
               213, 96, 1, 167, 197, 84, 252, 97, 179, 223, 6, 189, 234, 18, 114, 222, 172, 172, 177, 25, 88, 149, 175, 130, 60, 149, 36, 241, 239, 104, 167, 86, 73, 93, 157,
               179, 219, 208, 168, 35, 23, 233, 24, 141, 242, 35, 97, 110, 225, 9, 251, 62, 183, 172, 228, 169, 157, 53, 156, 182, 164, 229, 239, 228, 180, 228, 90, 88, 3, 92,
               227, 128, 152, 115, 132, 32, 195, 177, 89, 62, 202, 221, 9, 214, 189, 220, 107, 55, 208, 153, 94, 151, 95, 88, 181, 27, 239, 248, 66, 76, 22, 220, 51, 104, 160,
               223, 207, 103, 175, 205, 255, 24, 254, 107, 170, 48, 69, 56, 93, 110, 183, 196, 170, 128, 185, 158, 243, 197, 177, 94, 0, 169, 243, 80, 96, 44, 251, 112, 138, 240,
               245, 38, 110, 168, 80, 228, 60, 126, 211, 221, 116, 127, 130, 156, 207, 100, 127, 157, 158, 198, 91, 223, 240, 161, 99, 64, 210, 19, 237, 147, 74, 20, 248, 236, 35,
               40, 199, 30, 198, 2, 168, 51, 102, 217, 158, 137, 250, 227, 176, 195, 191, 230, 224, 250, 140, 106, 142, 174, 81, 124, 171, 235, 35, 100, 201, 96, 145, 247, 190, 111,
               151, 143, 137, 206, 88, 41, 105, 22, 8, 138, 77, 198, 68, 203, 141, 242, 221, 191, 145, 177, 15, 130, 37, 132, 149, 228, 123, 193, 13, 60, 130, 217, 159, 26, 226, 250,
               59, 29, 29, 206, 136, 245, 142, 3, 136, 134, 228, 245, 168, 74, 55, 193, 152, 150, 188, 49, 178, 208, 41, 211, 102, 127, 231, 65, 242, 240, 123, 78, 196, 58, 24, 195,
               23, 22, 153, 72, 23, 31, 110, 53, 6, 141, 158, 56, 170, 188, 167, 70, 92, 102, 173, 27, 102, 177, 28];

          let d1state = newCircuitCryptoState(Buffer.from(d1), Buffer.from(k1));
          let payload1 = d1state.encryptOrigin(Buffer.from(input1));
          let encryptHop0 = cryptoState.encrypt(payload1);

          expect(payload1).to.eql(Buffer.from(encrypted1));
          expect(encryptHop0).to.eql(Buffer.from(encryptedHop));

          // double encrypted payload -- double decrypt testing
          var doubleEncrypted = [
               68, 91, 239, 219, 67, 93, 93, 152, 17, 12, 52, 237, 177, 245, 71, 225, 146, 211, 3, 208, 162, 151, 210, 36, 183, 189, 158, 97, 172, 141, 85, 214, 148, 97, 169, 11, 107, 154,
               49, 47, 3, 214, 76, 237, 207, 41, 26, 52, 170, 135, 181, 157, 194, 36, 254, 111, 74, 144, 66, 121, 51, 41, 23, 182, 248, 243, 243, 185, 179, 23, 196, 172, 161, 73, 34, 108, 42,
               215, 234, 193, 170, 98, 205, 4, 219, 65, 194, 109, 185, 134, 200, 91, 200, 70, 72, 14, 75, 67, 92, 67, 28, 230, 43, 155, 151, 0, 90, 44, 85, 191, 57, 45, 6, 72, 58, 84, 67, 213,
               79, 156, 29, 130, 6, 1, 92, 133, 56, 29, 165, 127, 136, 49, 38, 67, 169, 120, 128, 150, 58, 133, 43, 33, 214, 40, 234, 149, 24, 97, 78, 113, 212, 131, 75, 206, 206, 5, 161, 67,
               246, 121, 252, 197, 234, 70, 169, 164, 226, 223, 93, 33, 55, 70, 132, 76, 222, 136, 86, 131, 168, 109, 239, 76, 147, 101, 6, 39, 235, 128, 27, 116, 53, 136, 48, 60, 238, 212, 226,
               21, 52, 188, 216, 0, 244, 37, 200, 197, 122, 156, 230, 50, 56, 199, 235, 172, 116, 189, 36, 168, 0, 136, 234, 29, 27, 62, 162, 110, 247, 110, 224, 43, 95, 175, 58, 134, 170, 200,
               76, 171, 148, 22, 43, 191, 167, 79, 107, 103, 184, 79, 58, 112, 56, 199, 154, 97, 163, 231, 248, 23, 120, 233, 11, 29, 43, 38, 239, 36, 17, 222, 18, 129, 234, 219, 129, 9, 173, 117,
               87, 117, 178, 46, 60, 6, 84, 94, 63, 226, 68, 204, 187, 124, 173, 196, 102, 144, 55, 112, 215, 59, 183, 239, 1, 81, 237, 251, 167, 247, 48, 87, 112, 188, 199, 52, 49, 85, 14, 65, 181,
               231, 106, 9, 140, 92, 80, 24, 86, 4, 30, 11, 225, 134, 100, 123, 211, 89, 74, 113, 124, 77, 12, 48, 80, 80, 131, 67, 116, 99, 213, 81, 194, 148, 137, 182, 121, 225, 114, 107, 99, 179,
               31, 137, 39, 249, 4, 12, 75, 214, 29, 251, 37, 59, 133, 59, 47, 4, 193, 240, 31, 140, 71, 45, 44, 21, 158, 179, 16, 252, 118, 147, 103, 48, 200, 75, 209, 15, 8, 0, 224, 104, 177, 105,
               167, 179, 94, 227, 66, 136, 130, 138, 168, 196, 22, 140, 6, 41, 53, 87, 162, 89, 208, 142, 201, 238, 243, 165, 113, 42, 48, 171, 22, 15, 109, 89, 124, 254, 245, 225, 41, 72, 28, 149,
               114, 172, 233, 223, 35, 237, 229, 122, 243, 40, 73, 92, 49, 1, 197, 45, 161, 154, 24, 9, 237, 23, 246, 206, 223, 122, 4, 176, 127, 87, 50, 69, 212, 246, 100, 121, 17, 113, 79, 248, 122,
               200, 181, 170, 51, 135, 217, 203, 189, 126, 11, 35, 31, 3, 172, 67, 86, 177, 150, 185, 121, 20, 183, 244, 80, 135, 170, 84, 27];

          var outputDec1 = [
               46, 102, 64, 180, 228, 132, 144, 211, 139, 34, 238, 40, 205, 251, 123, 123, 104, 222, 73, 188, 148, 119, 28, 64, 147, 198, 171, 160, 92, 235, 8, 152, 171, 133, 167, 243, 209, 83, 93, 158,
               206, 30, 108, 108, 81, 194, 146, 0, 242, 226, 105, 197, 4, 150, 160, 231, 10, 211, 29, 204, 223, 98, 221, 158, 202, 229, 56, 233, 121, 142, 123, 87, 70, 90, 7, 118, 25, 108, 131, 230, 1,
               159, 181, 131, 110, 216, 179, 100, 139, 90, 239, 140, 114, 149, 42, 231, 97, 181, 187, 172, 156, 36, 80, 35, 107, 157, 230, 136, 230, 118, 64, 46, 114, 130, 149, 106, 207, 181, 63, 91, 214,
               250, 15, 187, 42, 76, 6, 98, 99, 150, 234, 181, 60, 153, 67, 83, 243, 45, 246, 164, 12, 113, 198, 9, 66, 208, 12, 42, 191, 125, 156, 163, 124, 187, 116, 152, 252, 175, 119, 163, 152, 44, 232,
               86, 228, 107, 200, 22, 146, 248, 104, 129, 108, 16, 245, 110, 14, 51, 240, 29, 146, 193, 196, 178, 134, 239, 238, 72, 199, 104, 42, 169, 97, 145, 61, 231, 71, 114, 21, 144, 76, 248, 52, 119,
               236, 132, 241, 11, 152, 116, 55, 208, 4, 177, 169, 219, 204, 148, 220, 177, 189, 210, 182, 231, 155, 242, 68, 78, 243, 125, 167, 176, 209, 213, 50, 80, 40, 192, 113, 224, 141, 92, 188, 225,
               172, 135, 91, 36, 49, 50, 71, 64, 51, 232, 199, 184, 249, 255, 179, 9, 161, 251, 127, 23, 16, 145, 57, 220, 85, 31, 233, 43, 206, 189, 51, 248, 31, 23, 200, 156, 218, 220, 195, 20, 238, 174,
               16, 154, 168, 125, 74, 125, 117, 86, 219, 245, 92, 46, 183, 96, 15, 212, 206, 225, 121, 245, 101, 209, 171, 100, 125, 228, 206, 211, 178, 47, 112, 0, 0, 251, 56, 185, 225, 253, 206, 68, 32,
               228, 165, 54, 225, 68, 82, 9, 89, 33, 238, 34, 21, 150, 119, 199, 129, 112, 46, 129, 224, 4, 116, 174, 49, 208, 99, 209, 221, 158, 83, 196, 195, 12, 96, 13, 186, 240, 90, 140, 176, 156, 87,
               248, 16, 75, 11, 213, 251, 50, 135, 236, 124, 169, 21, 211, 57, 58, 165, 134, 84, 83, 204, 39, 34, 30, 208, 254, 84, 17, 230, 58, 19, 62, 61, 43, 140, 132, 95, 35, 255, 181, 252, 208, 61, 246,
               250, 217, 54, 19, 185, 244, 224, 101, 93, 215, 126, 77, 175, 140, 113, 110, 23, 254, 16, 62, 164, 30, 189, 8, 0, 120, 225, 234, 218, 172, 128, 106, 157, 178, 15, 238, 132, 11, 189, 164, 8, 123,
               226, 138, 209, 99, 118, 76, 154, 69, 239, 47, 78, 116, 77, 146, 99, 224, 68, 82, 21, 150, 74, 76, 247, 141, 149, 114, 133, 55, 202, 135, 28, 70, 38, 251, 3, 99, 192, 235, 209, 165, 95, 247, 228,
               95, 74, 64, 154, 230, 54, 226, 81, 123, 18, 196, 200 ];

          var outputDecFinal = [
               2, 0, 0, 166, 56, 176, 202, 0, 66, 0, 64, 3, 234, 172, 190, 181, 237, 251, 131, 207, 236, 181, 48, 215, 144, 199, 6, 204, 14, 147, 23, 41, 215, 17, 254, 158, 223, 20, 195, 55, 142, 237, 9, 39, 148,
               3, 211, 44, 96, 43, 26, 160, 157, 222, 227, 235, 38, 132, 11, 8, 54, 45, 28, 135, 234, 116, 129, 223, 3, 197, 175, 128, 126, 7, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

          var backstate1d = [
               99, 245, 38, 158, 70, 53, 83, 146, 84, 185, 171, 207, 140, 252, 228, 169, 109, 21, 16, 196, ];
          var backstate1k = [
               30, 45, 108, 117, 156, 76, 81, 190, 247, 48, 29, 68, 80, 53, 141, 241, ];

          let d1Backstate = newCircuitCryptoState(Buffer.from(backstate1d), Buffer.from(backstate1k));
          let decrypted1 = backstate.decrypt(Buffer.from(doubleEncrypted));
          let decrypted2 = d1Backstate.decrypt(Buffer.from(decrypted1));

          expect(decrypted1).to.eql(Buffer.from(outputDec1));
          expect(decrypted2).to.eql(Buffer.from(outputDecFinal));
     })
})